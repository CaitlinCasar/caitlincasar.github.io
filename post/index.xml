<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Caitlin Casar</title>
    <link>/post/</link>
      <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sat, 13 Feb 2021 21:12:16 -0500</lastBuildDate>
    <image>
      <url>/img/avatar.jpg</url>
      <title>Posts</title>
      <link>/post/</link>
    </image>
    
    <item>
      <title>Using a Green Screen in Premiere Pro</title>
      <link>/post/greenscreen/</link>
      <pubDate>Sat, 13 Feb 2021 21:12:16 -0500</pubDate>
      <guid>/post/greenscreen/</guid>
      <description>


&lt;p&gt;
Hello! Today I want to share a quick tutorial on how to use a green screen in &lt;a href=&#34;https://www.adobe.com/products/premiere.html?sdid=KKQOM&amp;amp;mv=search&amp;amp;kw=test&amp;amp;ef_id=CjwKCAiAjp6BBhAIEiwAkO9Wuio80LqbtnaqDCEclArcjpHpSpbm5vfJjf8NyvEIU3mf2OReKuOx9RoCUt4QAvD_BwE:G:s&amp;amp;s_kwcid=AL!3085!3!469198202114!e!!g!!adobe%20premiere%20pro&amp;amp;gclid=CjwKCAiAjp6BBhAIEiwAkO9Wuio80LqbtnaqDCEclArcjpHpSpbm5vfJjf8NyvEIU3mf2OReKuOx9RoCUt4QAvD_BwE&#34; target=&#34;_blank&#34;&gt;Adobe Premiere Pro&lt;/a&gt;! Premiere Pro is a video editor in the Adobe Creative Cloud suite that‚Äôs got a ton of great features that make movie making a breeze! I wanted to try out using a green screen because I‚Äôm working on a video of my PhD defense. Due to COVID I can‚Äôt defend in person, so I thought I‚Äôd try to have some fun with special effects! First I‚Äôll go through the equipment I used and then I‚Äôll show you how to replace your green screen background in Adobe.
&lt;/p&gt;
&lt;div id=&#34;green-screen&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Green Screen&lt;/h2&gt;
&lt;p&gt;
This is a green screen I bought on &lt;a href=&#34;https://www.amazon.com/gp/product/B08KDFXBXK/ref=ppx_yo_dt_b_asin_image_o00_s00?ie=UTF8&amp;amp;psc=1&#34; target=&#34;_blank&#34;&gt;Amazon&lt;/a&gt;. I chose this green screen because I wanted to be able to use it anywhere in my apartment, sitting or standing.
&lt;/p&gt;
&lt;img class=&#34;post&#34; src=&#34;images/greenscreen_product.jpg&#34;&gt;
&lt;p class=&#34;caption&#34;&gt;
Green screen from Amazon.
&lt;/p&gt;
&lt;p&gt;
The dimensions are 5‚Äôx7‚Äô and you can hang it either landscape or portrait orientation on a telescoping tripod. The tripod height is adjustable and easy to set up.
&lt;/p&gt;
&lt;img class=&#34;post&#34; src=&#34;images/greenscreen_orientation.jpg&#34;&gt;
&lt;p class=&#34;caption&#34;&gt;
Landscape and portrait orientations with Chris for scale.
&lt;/p&gt;
&lt;p&gt;
The other thing I love about this green screen is that you can fold it up so it doesn‚Äôt take up much space. It‚Äôs double-sided with green on one side and blue on the other, and it‚Äôs very lightweight.
&lt;/p&gt;
&lt;img class=&#34;post&#34; src=&#34;images/greenscreen_foldup.jpg&#34;&gt;
&lt;p class=&#34;caption&#34;&gt;
The folded up green screen fits in my closet.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ring-light&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Ring Light&lt;/h2&gt;
&lt;p&gt;I also bought this ring light on &lt;a href=&#34;https://www.amazon.com/gp/product/B08CM3B44L/ref=ppx_yo_dt_b_asin_title_o01_s00?ie=UTF8&amp;amp;psc=1&#34; target=&#34;_blank&#34;&gt;Amazon&lt;/a&gt; because the green screen works best when your background has no shadows. The ring light is on a telescoping tripod so the height is adjustable and can be used sitting or standing.&lt;/p&gt;
&lt;img class=&#34;post&#34; src=&#34;images/ringlight_product.jpg&#34;&gt;
&lt;p class=&#34;caption&#34;&gt;
Ring light with Chris for scale.
&lt;/p&gt;
&lt;p&gt;The ring light has controls for three different light colors from cool to warm and brightness levels. There‚Äôs also a bluetooth controller that you can use for the shutter on your phone camera if you want to take selfies!&lt;/p&gt;
&lt;img class=&#34;post&#34; src=&#34;images/ringlight_controls.jpg&#34;&gt;
&lt;p class=&#34;caption&#34;&gt;
Ring light cool and warm colors, light controller, and bluetooth shutter controller.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;adobe-premiere-pro&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Adobe Premiere Pro&lt;/h2&gt;
&lt;p&gt;
And now for my super quick green screen tutorial in Premiere Pro! Check out the video below to see how I set the green screen background to transparent and layered my videos for a cool background effect. I‚Äôm a noob myself so if you have tips please share them in the comments section on this page below!
&lt;/p&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;400&#34; src=&#34;https://www.youtube.com/embed/ULF2nGJXhHk&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;
I hope you enjoyed this tutorial, feel free to comment below with any comments/questions! üòé
&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Jupyter notebooks in PyCharm</title>
      <link>/post/pycharm/</link>
      <pubDate>Fri, 03 Jul 2020 21:12:16 -0500</pubDate>
      <guid>/post/pycharm/</guid>
      <description>


&lt;p&gt;Today we‚Äôre going on a Python adventure using &lt;a href=&#34;https://jupyter.org/&#34; target=&#34;_blank&#34;&gt;Jupyter&lt;/a&gt; notebooks and &lt;a href=&#34;https://www.jetbrains.com/pycharm/&#34; target=&#34;_blank&#34;&gt;PyCharm&lt;/a&gt;! First, let‚Äôs talk about what these are. Jupyter Notebook is a web application where you can create interactive coding documents, supporting many programming languages including both Python and R as well as Markdown. PyCharm is an amazing IDE (interactive development environment) for Python that has tools and plugins to help you code more efficiently. You can develop your code both locally and remotely using PyCharm. First, let‚Äôs get set up!&lt;/p&gt;
&lt;div id=&#34;getting-started-with-pycharm&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting started with PyCharm&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Install &lt;a href=&#34;https://www.jetbrains.com/pycharm/download/&#34; target=&#34;_blank&#34;&gt;PyCharm&lt;/a&gt;.I highly recommend installing PyCharm Professional because you get more features like SciView that are awesome for data science. Plus PyCharm Professional is free for students!
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Install &lt;a href=&#34;https://www.python.org/downloads/&#34; target=&#34;_blank&#34;&gt;Python&lt;/a&gt; if you don‚Äôt already have it - you‚Äôll need an interpreter in order to use PyCharm! Be aware that Python 2 and Python 3 are different in terms of syntax - don‚Äôt worry, you can load either version in PyCharm when you start a new project. If this is your first time developing in Python, I recommend going with the latest version 3.8.3.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Create a new project in PyCharm and select your local Python interpreter. Here, I created a new project called ‚Äòpycharm‚Äô in a directory on my desktop and selected Python 3.7 as my interpreter.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/new-project.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Install Jupyter by selecting PyCharm &amp;gt;&amp;gt; Preferences &amp;gt;&amp;gt; Project Interpreter, then click the ‚Äú+‚Äù button to add new packages.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/project-preferences.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
Then type ‚Äòjupyter‚Äô and select jupyter from the packages list. Then click the ‚ÄòInstall Package‚Äô button at the bottom of the window.
&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/install-jupyter.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Create a new Jupyter notebook by navigating to File &amp;gt;&amp;gt; New‚Ä¶ and selecting ‚ÄòJupyter Notebook‚Äô. Alternatively, if you just want to create a Python script you can select ‚ÄòPython File‚Äô. Here, I created a new notebook called pycharm.ipynb.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/new-notebook.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Let‚Äôs start editing our notebook by adding a Markdown cell. In the editor next to the ‚Äò#%‚Äô, add ‚Äòmd‚Äô to set the cell type to Markdown. Then use Markdown formatting, such as ‚Äò### Header‚Äô like in my example here. Notice that the right side panel displays a preview of your notebook.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/markdown-cell.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;7&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Now let‚Äôs add a coding cell. Click the ‚Äò+‚Äô button just below the Markdown cell to add a new cell. Add your code and click the green arrow to run the code in the cell.
&lt;p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/code-cell.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
Here I created and printed a variable called my_string.
&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/my-string.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;8&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Let‚Äôs check out a cool feature of PyCharm Scientific View. Add the following to a code cell and run it:
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import pandas as pd

#read in data from my github repo
data = pd.read_csv(&amp;quot;https://raw.githubusercontent.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms/master/orig_data/site_geochem.csv&amp;quot;)
data.head()&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;9&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Next, open your Jupyter tab at the bottom of your PyCharm window, click on the variables tab, and right click on the new variable you just created called ‚Äòdata‚Äô. Select ‚ÄòView as Dataframe‚Äô, then click on the ‚ÄòSciView‚Äô tab on the right panel.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/view-dataframe.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
This is a great feature for viewing your stored variables. You can view both dataframes and arrays with SciView.
&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/sciview.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;10&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Let‚Äôs try launching this notebook in our browser. Click on the text at the bottom of your PyCharm window that says ‚ÄúJupyter Server started at &lt;a href=&#34;http://localhost:8888//&#34; class=&#34;uri&#34;&gt;http://localhost:8888//&lt;/a&gt; Open in Browser‚Äù. You should see an Event Log window pop up in the bottom right panel. Click on ‚ÄúOpen in Browser‚Äù to launch your notebook in your web browser.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/open-in-browser.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
You should now see something like this in your browser:
&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/jupyter-web.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
Click on the notebook to run your code in the browser window. You can run cells by clicking the Run button in the top tool bar, or by clicking Ctrl + Enter.
&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/interactive-code.png&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sync-files-with-a-remote-server&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sync files with a remote server&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Let‚Äôs say you want to sync files on a remote server. You‚Äôll need to set up your file transfer protocol. Select Tools &amp;gt;&amp;gt; Deployment &amp;gt;&amp;gt; Browse Remote Host. Then select your protocol - here I chose SFTP (secure file transfer protocol).
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/browse-remote-host.png&#34;&gt;
&lt;img class=&#34;post&#34; src=&#34;images/sftp.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Next, configure your connection to the remote host by adding your IP address and log in credentials. Optionally, set your root path to the path on the remote server where you want to access files.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/ssh-config.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Click on the Mapping tab and set your local path to your project directory in PyCharm. Set the deployment path to the directory on the remote server where you want to access or upload files.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/mapping.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Sync your local directory with the remote directory by right-clicking on your project in the left panel, then select Deployment &amp;gt;&amp;gt; Sync with Deployed To‚Ä¶&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/sync.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
Then click the green double arrow button ‚ÄúSynchronize All‚Äù to sync your files. You can use the ‚ÄòRemote Host‚Äô tab on the right panel to view your remote file tree.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;run-a-remote-jupyter-server-kernel&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Run a remote Jupyter server kernel&lt;/h2&gt;
&lt;p&gt;
If you want to run an interactive Jupyter notebook on a remote server in PyCharm, you‚Äôll need to set up your Jupyter server configuration and remote Python interpreter.
&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
In the terminal, SSH into your remote server, navigate to the directory where your data is, then launch a Jupyter notebook.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/remote-server-ssh.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Navigate to the directory where your data is located. Then launch a jupyter notebook by running the following:
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;#replace port number with whatever port you want
jupyter notebook --port=8899 --no-browser&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This will return a url and token, similar to:
&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;https://my-notebook/tree/?token=abcdef...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Copy this entire url and token. Make sure you copy it all from one line - I have to make my terminal full screen for this. Otherwise you might get a weird line break and your url/token might not work.
&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Open a new Jupyter notebook file and select ‚ÄòConfigure jupyter server‚Ä¶‚Äô.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/configure-jupyter-server.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
Paste your url and token in the field for ‚ÄòConfigured Server‚Äô. Then click ‚ÄòApply‚Äô.
&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/configured-server.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
You should now be able to access data on the remote server in your Jupyter notebook. Here, I cloned my repo on the remote server, and I‚Äôm accessing a csv file with the pandas library.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/remote-data.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
If you want to use an interpreter on the remote server, you can figure the interpreter by naviating to Pycharm &amp;gt;&amp;gt; Preferences &amp;gt;&amp;gt; Project Interpreter‚Ä¶, then select the wheel button next to your current interpreter and select ‚ÄòAdd‚Ä¶‚Äô. Then select ‚ÄòSSH interpreter‚Äô and choose ‚ÄòExisting server configuration‚Äô. From the dropdown menu, select the SSH configuration that you set up in step 2 of the ‚ÄòSync files with a remote server‚Äô above.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/remote-interpreter.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Note:&lt;/strong&gt;Unfortunately, you cannot view your variables while using a remote Jupyter server kernel as documented &lt;a href=&#34;https://www.jetbrains.com/help/pycharm/running-jupyter-notebook-cells.html#variables&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Congrats on developing in Jupyter Notebooks and PyCharm! I hope you enjoyed this tutorial, feel free to comment below with any comments/questions! üòé
&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Making beautiful interactive slides with revealJS</title>
      <link>/post/revealjs/</link>
      <pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/post/revealjs/</guid>
      <description>


&lt;p&gt;
Today I‚Äôll show you how to spice up your presentations with &lt;a href=&#34;https://github.com/rstudio/revealjs&#34; target=&#34;_blank&#34;&gt;revealJS&lt;/a&gt; in R. This is an HTML presentation framework that allows you to share your slides on the web, add custom animations, embed websites into your slides, and more! Here‚Äôs an example of a presentation I made for my 2020 Spring Committee Meeting:
&lt;/p&gt;
&lt;iframe src=&#34;SpringCommitteeMeeting2020/revealjs.html&#34; width=&#34;100%&#34; height=&#34;500&#34; style=&#34;border: none;&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;
This presentation was a lot of fun to make! Here I‚Äôll show you the basics, then I‚Äôll give examples of more advanced stuff you can do.
&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
First, we need to get set up to use revealjs in R. Open RStudio and run the following in your console:
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;revealjs&amp;quot;, type = &amp;quot;source&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/install.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Next, open up a new R markdown document.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/new-file.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Select the HTML output in the pop-up window and give your document a title.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/new-presentation.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Then modify your header content. To make my slides in the example above, I used this header:
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;---
output: 
  revealjs::revealjs_presentation:
    transition: default
    self_contained: false
    reveal_plugins: notes
    css: styles.css
    center: true
    mathjax: NULL
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/yaml.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
Here‚Äôs a breakdown of those parameters:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;
&lt;strong&gt;Output&lt;/strong&gt; indicates that you want a revealjs output.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;strong&gt;Transition&lt;/strong&gt; sets your slide transitions. You can choose from ‚Äúdefault‚Äù, ‚Äúfade‚Äù, ‚Äúslide‚Äù, ‚Äúconvex‚Äù, ‚Äúconcave‚Äù, ‚Äúzoom‚Äù or ‚Äúnone‚Äù.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;strong&gt;Self contained&lt;/strong&gt; determines whether dependencies are external or internal. To use plugins this has to be set to false.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;strong&gt;Reveal plugins&lt;/strong&gt; enable plugins including notes, zoom, search, and chalkboard. The notes plugin functions much like presenter mode in Powerpoint.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;strong&gt;CSS&lt;/strong&gt; is your custom styles CSS (cascading style sheet) file. This allows you to add styling to HTML elements, such as font color, add animations, and more.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;strong&gt;Center&lt;/strong&gt; sets all of your slides to center text alignment. You can set the alignment on individual slides as well.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;strong&gt;Mathjax&lt;/strong&gt; enables rendering of LaTeX and MathML equations including special characters like greek symbols. Options include default, local, and NULL.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Now, lets add some slides!:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;---
output: 
  revealjs::revealjs_presentation:
    transition: default
    self_contained: false
    reveal_plugins: notes
    css: styles.css
    center: true
    mathjax: NULL
---

# This is my title slide

# This is Section 1

## This is the first slide in Section 1

# This is Section 2

## This is the first slide in Section 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Once your slides are ready, click the Knit button to build the html output and preview your slides!
&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/knit.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
The code above produces the following slides:
&lt;/p&gt;
&lt;iframe src=&#34;example_slides/example1.html&#34; width=&#34;100%&#34; height=&#34;500&#34; style=&#34;border: none;&#34;&gt;
&lt;/iframe&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Let‚Äôs add some style to the slides. We can add a background color, background image, or embed an html file as the background! Be aware of potential securtiy issues when embedding an external website - you should only do this if you trust the site! Here, I added different types of backgrounds on each slide, including image, video, html, and color:
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;---
output: 
  revealjs::revealjs_presentation:
    transition: default
    self_contained: false
    reveal_plugins: notes
    css: styles.css
    center: true
    mathjax: NULL
---

# {data-background=&amp;quot;https://images.pexels.com/photos/949587/pexels-photo-949587.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;dpr=2&amp;amp;w=500&amp;quot;}

&amp;lt;h1 style=&amp;quot;color: #fff&amp;quot;&amp;gt;Caitlin&amp;#39;s Presentation&amp;lt;/h1&amp;gt;

# {data-background=#262626}

&amp;lt;h1 style=&amp;quot;color: #fff&amp;quot;&amp;gt;Check out my website&amp;lt;/h1&amp;gt;

## {data-background-iframe=&amp;quot;https://www.caitlincasar.com&amp;quot;}

# Check out this video I made 

## 
&amp;lt;iframe width=&amp;quot;100%&amp;quot; height=&amp;quot;500&amp;quot; src=&amp;quot;https://www.youtube.com/embed/FZ66_XqZZhg&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&amp;quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;

## {data-background-video=&amp;quot;AreWeAlone_Corrected.mp4&amp;quot;}&lt;/code&gt;&lt;/pre&gt;
&lt;iframe src=&#34;example_slides/example2.html&#34; width=&#34;100%&#34; height=&#34;500&#34; style=&#34;border: none;&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;
&lt;strong&gt;Note:&lt;/strong&gt; This example doesn‚Äôt include the last slide in the example Rmarkdown above due to file size limits on Github where I host my content.
&lt;/p&gt;
&lt;ol start=&#34;7&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Let‚Äôs add some fun styling with CSS! Open a new text file and name it styles.css. Save this in the same directory as your Rmarkdown file.
&lt;p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/text-file.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
Add some styling to the h1 element - these are the headers in your slide. Here, I‚Äôm changing the font color and adding a cool animation.
&lt;/p&gt;
&lt;pre class=&#34;css&#34;&gt;&lt;code&gt;.present .tracking-in-expand {
    -webkit-animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) both;
            animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) both;
}
@-webkit-keyframes tracking-in-expand {
  0% {
    letter-spacing: -0.5em;
    opacity: 0;
  }
  40% {
    opacity: 0.6;
  }
  100% {
    opacity: 1;
  }
}
@keyframes tracking-in-expand {
  0% {
    letter-spacing: -0.5em;
    opacity: 0;
  }
  40% {
    opacity: 0.6;
  }
  100% {
    opacity: 1;
  }
}

h1 {
    color: #262626;
    -webkit-animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) infinite both;
            animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) infinite both;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/styles.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
This is the Rmarkdown content I used to produce the slide below:
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;---
output: 
  revealjs::revealjs_presentation:
    transition: default
    self_contained: false
    reveal_plugins: notes
    css: styles.css
    center: true
    mathjax: NULL
---

# {data-background=#262626}

&amp;lt;h1 style=&amp;quot;color: #fff&amp;quot;&amp;gt;Caitlin&amp;#39;s Presentation&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;iframe src=&#34;example_slides/example3/example3.html&#34; width=&#34;100%&#34; height=&#34;500&#34; style=&#34;border: none;&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;
Here‚Äôs an example where I used both custom CSS and a custom html header:
&lt;/p&gt;
&lt;pre class=&#34;css&#34;&gt;&lt;code&gt;@-webkit-keyframes color-change-5x {
  0% {
    color: #19dcea;
  }
  25% {
    color: #b22cff;
  }
  50% {
    color: #ea2222;
  }
  75% {
    color: #f5be10;
  }
  100% {
    color: #3bd80d;
  }
}
@keyframes color-change-5x {
  0% {
    color: #19dcea;
  }
  25% {
    color: #b22cff;
  }
  50% {
    color: #ea2222;
  }
  75% {
    color: #f5be10;
  }
  100% {
    color: #3bd80d;
  }
}


#title h1 {
    font-size: 1.50em;
    color: #ffff00;
    font-family: &amp;#39;Roboto&amp;#39;, sans-serif !important;
        -webkit-animation: color-change-5x 8s linear infinite alternate both;
            animation: color-change-5x 8s linear infinite alternate both;
}       

.color-change-5x-background {
    -webkit-animation: color-change-5x-background 2s linear infinite alternate both;
            animation: color-change-5x-background 2s linear infinite alternate both;
}


@-webkit-keyframes color-change-5x-background {
  0% {
    background: #19dcea;
  }
  25% {
    background: #b22cff;
  }
  50% {
    background: #ea2222;
  }
  75% {
    background: #f5be10;
  }
  100% {
    background: #3bd80d;
  }
}
@keyframes color-change-5x-background {
  0% {
    background: #19dcea;
  }
  25% {
    background: #b22cff;
  }
  50% {
    background: #ea2222;
  }
  75% {
    background: #f5be10;
  }
  100% {
    background: #3bd80d;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/styles.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
I added custom font from Google fonts by creating a new text file called header.html and adding this to the file:
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;&amp;lt;link href=&amp;quot;https://fonts.googleapis.com/css2?family=Roboto:wght@900&amp;amp;display=swap&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This is the Rmarkdown file I used to produce the slides below:
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;---
output: 
  revealjs::revealjs_presentation:
    transition: default
    self_contained: false
    reveal_plugins: notes
    css: styles.css
    in_header: header.html
    center: true
    mathjax: NULL
---

# {#title data-background=#262626}

&amp;lt;h1 style=&amp;quot;color: #fff&amp;quot;&amp;gt;Caitlin&amp;#39;s Presentation&amp;lt;/h1&amp;gt;

# Rainbow background! {.color-change-5x-background}&lt;/code&gt;&lt;/pre&gt;
&lt;iframe src=&#34;example_slides/example4/example4.html&#34; width=&#34;100%&#34; height=&#34;500&#34; style=&#34;border: none;&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;
As you can see, there‚Äôs a ton of cool stuff you can do with revealjs! Check out the &lt;a href=&#34;https://github.com/rstudio/revealjs&#34; target=&#34;_blank&#34;&gt;official documentation&lt;/a&gt; for more information, and check out &lt;a href=&#34;https://github.com/rstudio/revealjs&#34; target=&#34;_blank&#34;&gt;this guide&lt;/a&gt; for more info on Rmarkdown.
&lt;/p&gt;
&lt;p&gt;
Congrats on making awesome slides in revealjs! üòé Feel free to comment below with any comments/questions!
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thermodynamic Modeling with CHNOSZ</title>
      <link>/post/thermodynamic_modeling/</link>
      <pubDate>Sat, 20 Jun 2020 21:14:16 -0500</pubDate>
      <guid>/post/thermodynamic_modeling/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;
Are you curious what sorts of metabolic processes might be occurring at your study site? Using in situ geochemical data, you can model the Gibbs free energy available from metabolic reactions and predict which metabolisms are energetically favorable! Gibbs free energy can be modeled using the following equation:
&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\Delta G_r - RT ln \frac{K_r}{Q_r }\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
where &lt;span class=&#34;math inline&#34;&gt;\(\Delta G_r\)&lt;/span&gt; is the Gibbs energy of reaction &lt;em&gt;r&lt;/em&gt; under in situ conditions, &lt;span class=&#34;math inline&#34;&gt;\(K_r\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(Q_r\)&lt;/span&gt; are the equillibrium constant and activity product of the &lt;em&gt;r&lt;/em&gt;th reaction, R is the gas constant, and T is temperature in Kelvin.
&lt;/p&gt;
&lt;p&gt;
&lt;span class=&#34;math inline&#34;&gt;\(Q_r\)&lt;/span&gt; can be calculated using the following equation:
&lt;/p&gt;
&lt;span class=&#34;math display&#34;&gt;\[Q_r = \prod a_i ^{v_{i,r}}\]&lt;/span&gt;
&lt;p&gt;
where &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; is the activity of the &lt;em&gt;i&lt;/em&gt;th species and &lt;span class=&#34;math inline&#34;&gt;\(v_{i,r}\)&lt;/span&gt; is the stoichiometric coefficient of the &lt;em&gt;i&lt;/em&gt;th species in the &lt;em&gt;r&lt;/em&gt;th reaction.
&lt;/p&gt;
&lt;p&gt;
For this tutorial I‚Äôm using data and code from my &lt;a href=&#34;https://caitlincasar.com/publication/casar2020/&#34;&gt;publication&lt;/a&gt; in &lt;em&gt;Geobiology&lt;/em&gt;. We calculated activity coefficients for each species of interest using Spece8 in &lt;a href=&#34;https://www.gwb.com/&#34;&gt;Geochemist‚Äôs Workbench&lt;/a&gt; using geochemical data collected from our field site. Then we used the &lt;a href=&#34;https://www.chnosz.net/&#34;&gt;CHNOSZ&lt;/a&gt; package to calculate Gibbs free energy of various metabolic reactions. First, let‚Äôs check out what the activity data looks like.
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#load tidyverse library
pacman::p_load(tidyverse)

activities &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms/master/orig_data/DeMMO_SpecE8_aqueousGas.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/thermodynamic_modeling/index_files/figure-html//widgets/widget_unnamed-chunk-2.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;
You can see we calculated activites for Ca&lt;sup&gt;2+&lt;/sup&gt;, acetate, CH&lt;sub&gt;4&lt;/sub&gt;, Fe&lt;sup&gt;2+&lt;/sup&gt;, H&lt;sup&gt;+&lt;/sup&gt;, HCO&lt;sub&gt;3&lt;/sub&gt;&lt;sup&gt;-&lt;/sup&gt;, HS&lt;sup&gt;-&lt;/sup&gt;, Mn&lt;sup&gt;2+&lt;/sup&gt;, NH&lt;sub&gt;4&lt;/sub&gt;&lt;sup&gt;+&lt;/sup&gt;, NO&lt;sub&gt;2&lt;/sub&gt;&lt;sup&gt;-&lt;/sup&gt;, NO&lt;sub&gt;3&lt;/sub&gt;&lt;sup&gt;-&lt;/sup&gt;, and SO&lt;sub&gt;4&lt;/sub&gt;&lt;sup&gt;2-&lt;/sup&gt; at six different sites called DeMMO1-6.
&lt;/p&gt;
&lt;p&gt;
Once you have your activity coefficients, then you need to decide what reactions you want to model. I was interested in metabolic reactions with minerals, so I created a spreadsheet of balanced reactions with minerals and aqueous species available in situ. Let‚Äôs load this data and preview it here.
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#import DeMMO mineral reactions
reactions &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms/master/orig_data/reactions_aq_gas.csv&amp;quot;) %&amp;gt;%
  filter(!product.f == &amp;quot;manganite&amp;quot;) #removing reactions with manganite because we don&amp;#39;t have equation of state data for this &lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/thermodynamic_modeling/index_files/figure-html//widgets/widget_unnamed-chunk-4.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;
The formatting of this data is important for compatability with CHNOSZ, so make sure you include the details I‚Äôm showing here when you balance your reactions. Notice that the reactant stoichiometric coefficients are negative because they‚Äôre on the left side of the reaction, while products are positive because they‚Äôre on the right side of the reaction. Now we‚Äôre ready to model Gibbs free energy from these reactions in CHNOSZ! First we‚Äôll load the CHNOSZ library.
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#load the CHNOSZ library
pacman::p_load(CHNOSZ)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs take a look at the available species for modeling reactions in the CHNOSZ database:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;thermo_db &amp;lt;- thermo()$obigt %&amp;gt;% as_tibble()&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/thermodynamic_modeling/index_files/figure-html//widgets/widget_unnamed-chunk-7.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;A few minerals that I was interested in were missing in the database, but that‚Äôs ok! If you have the Gibbs free energy available at stadard conditions and the equation of state data for your reactant, you can add it to the CHNOSZ database. Let‚Äôs add pyrolusite and ferrihydrite with the mod.obigt function!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#add pyrolusite to database
pyrolusite &amp;lt;- mod.obigt(&amp;quot;pyrolusite&amp;quot;, G=-111100, H=-124283, S=12.61, V=17.3, formula=&amp;quot;MnO2&amp;quot;, state=&amp;quot;cr&amp;quot;, a1.a=12.55, a2.b=9.761, a3.c=-2.105)

#add ferrihydrite to database
ferrihydrite &amp;lt;- mod.obigt(&amp;quot;ferrihydrite&amp;quot;, G=-111200, H=-127800, S=16.7, V=20.88, formula=&amp;quot;FeOOH&amp;quot;, state=&amp;quot;cr&amp;quot;, a1.a=8.70, a2.b=36.71, a3.c=-1.0146)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can set your temperature and energy units like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#set temperature units to Kelvin
T.units(&amp;quot;K&amp;quot;)

#set energy units to joules
E.units(&amp;quot;J&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs calculate logK:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;logK &amp;lt;- reactions %&amp;gt;%
  pivot_longer(reactant.a:state.i,
               names_to = c(&amp;quot;.value&amp;quot;, &amp;quot;set&amp;quot;),
               names_pattern = &amp;quot;(.+).(.+)&amp;quot;) %&amp;gt;% #pivot from wide to long dataframe
  unite(&amp;quot;react_prod&amp;quot;, reactant:product, na.rm = TRUE, remove = F) %&amp;gt;% #unite the reactants and products into one column 
  filter(!react_prod == &amp;quot;&amp;quot;) %&amp;gt;% #remove any rows with missing react_prod values
  group_by(rxn.number) %&amp;gt;% #group by reaction number for calculations
  summarise(DeMMO1 = subcrt(react_prod, coeff, state, T=283.45)$out$logK,#calculate logK using in situ DeMMO1 temperature for all other reactions 
         DeMMO2 = subcrt(react_prod, coeff, state, T=285.55)$out$logK,
         DeMMO3 = subcrt(react_prod, coeff, state, T=289.35)$out$logK,
         DeMMO4 = subcrt(react_prod, coeff, state, T=295.65)$out$logK,
         DeMMO5= subcrt(react_prod, coeff, state, T=304.85)$out$logK,
         DeMMO6 = subcrt(react_prod, coeff, state, T=294.65)$out$logK) %&amp;gt;%
  pivot_longer(cols = DeMMO1:DeMMO6, names_to = &amp;quot;Site&amp;quot;, values_to = &amp;quot;LogK&amp;quot;) %&amp;gt;% #pivot from wide to long for merging later 
  distinct() #remove the duplicate rows &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to calculate logQ:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;activities &amp;lt;- activities %&amp;gt;%
  pivot_longer(`Ca+2`:CO, names_to = &amp;quot;react_prod&amp;quot;, values_to = &amp;quot;activity&amp;quot;) #pivot from wide to long for joining

logQ &amp;lt;- reactions %&amp;gt;%
  pivot_longer(reactant.a:state.i,
               names_to = c(&amp;quot;.value&amp;quot;, &amp;quot;set&amp;quot;),
               names_pattern = &amp;quot;(.+).(.+)&amp;quot;) %&amp;gt;% #pivot from wide to long 
  unite(&amp;quot;react_prod&amp;quot;, reactant:product, na.rm = TRUE, remove = F) %&amp;gt;% #unite the reactant and product columns into one column called react_prod 
  left_join(activities) %&amp;gt;% #join with the activities data 
  filter(!is.na(activity)) %&amp;gt;% #remove any activities with NA values 
  mutate(logQ = if_else(!is.na(reactant), -abs(coeff)*activity, abs(coeff)*activity)) %&amp;gt;% #multiply each species by its stoichiometric coefficient 
  group_by(rxn.number, Site) %&amp;gt;% #group on the reaction number and site 
  summarise(logQ = sum(logQ)) #calculate logQ &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, it‚Äôs time to calculate Gibbs free energy yield from each reaction!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;deltaG &amp;lt;- logK %&amp;gt;%
  left_join(logQ) %&amp;gt;% #join the logK and logQ tables 
  left_join(reactions %&amp;gt;% select(rxn.number, e.transfer, reactant.a)) %&amp;gt;% #add the reaction number, number of electrons transferred, and minerals from each reaction 
  rename(mineral = &amp;quot;reactant.a&amp;quot;) %&amp;gt;% #rename reactant.a to mineral for clarity 
  mutate(deltaG = (-2.303*8.314*283.45*(LogK-logQ))/(e.transfer*1000)) #calculate deltaG for each reaction at each site &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets‚Äôs take a look at the deltaG table:
&lt;div id=&#34;htmlwidget-4&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/thermodynamic_modeling/index_files/figure-html//widgets/widget_unnamed-chunk-13.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Now, let‚Äôs plot the data and see which metabolic reactions with minerals are energetically favorable under in situ conditions at DeMMO:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;deltaG %&amp;gt;%
  ggplot(aes(deltaG, reorder(rxn.number, -deltaG), shape=Site, group=rxn.number)) +
  theme_gray() +
  geom_line(aes(color=mineral), size=2.5, alpha=0.6) + #color each line spanning the deltaG values for the six sites by the mineral in the reaction
  geom_point() + 
  scale_shape_manual(values = c(0,1,2,15,16,17)) + #manually set the shapes for each point to denote the six different sites 
  scale_x_reverse() + #reverse the x-axis to show exergonic values on the right, this is standard for this kind of data
  labs(x=expression(Delta~G[r]~&amp;#39;kJ/mol&amp;#39;~e^{textstyle(&amp;quot;-&amp;quot;)})) + #generate the axis labels
  ylab(&amp;quot;Reaction #&amp;quot;) +
  geom_vline(xintercept = 0, linetype=&amp;quot;dotted&amp;quot;, color = &amp;quot;black&amp;quot;) + #add a vertical line at zero for reference 
  theme(legend.position = c(.1, .6), legend.text=element_text(size=8), legend.title = element_text(size=8, face=&amp;quot;bold&amp;quot;)) + #position the legend on the left 
  theme(legend.key.size =  unit(0.2, &amp;quot;in&amp;quot;)) #resize the legend to make it fit &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/thermodynamic_modeling/index_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Everything that plots to the right of the dotted line is exergonic, while everything to the left of the dotted line is endergonic. The most exergonic and therefore the most energetically favorable reactions occur with the mineral pyrolusite, followed by pyrite. If you‚Äôre curious which reactant was coupled to these minerals for each reaction, refer back to the reactions table above! üë©‚Äçüî¨&lt;/p&gt;
&lt;a class=&#34;github-button&#34; href=&#34;https://github.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms&#34; data-icon=&#34;octicon-repo-forked&#34; aria-label=&#34;Fork ntkme/github-buttons on GitHub&#34;&gt;Fork Me&lt;/a&gt;
&lt;script async defer src=&#34;https://buttons.github.io/buttons.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Create your own site with blogdown in R</title>
      <link>/post/blogdown/</link>
      <pubDate>Tue, 09 Jun 2020 21:14:16 -0500</pubDate>
      <guid>/post/blogdown/</guid>
      <description>


&lt;p&gt;Wanna create and host your own site for free? I‚Äôll show you how I created and hosted my site caitlincasar.com! We‚Äôll go over the two basic tools I used: the &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34; target=&#34;_blank&#34;&gt;blogdown&lt;/a&gt; package in R and &lt;a href=&#34;https://pages.github.com/&#34; target=&#34;_blank&#34;&gt;Github Pages&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;getting-started-with-git-and-github&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting started with Git and Github&lt;/h2&gt;
&lt;p&gt;The first thing we need to do is get set up on Github. If you‚Äôre not familiar with Github, it‚Äôs a Git repository hosting service that also provides version control and collaboration features. Git is the version control system that tracks changes in your files and makes it easy to update your repository on Github. If this doesn‚Äôt make sense now, that‚Äôs ok! Once you see Git and Github in action it should be clear why we‚Äôre using it.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Install &lt;a href=&#34;https://www.linode.com/docs/development/version-control/how-to-install-git-on-linux-mac-and-windows/&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Next, create an account on &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;. If you set up a student account, you‚Äôll have access to private repositories (i.e.¬†if you need to backup unpublished data or code) - I highly recommend this!
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Now, you‚Äôll need to set your credentials in Git. Open up your Mac terminal or &lt;a href=&#34;https://www.atlassian.com/git/tutorials/git-bash&#34; target=&#34;_blank&#34;&gt;gitbash&lt;/a&gt; on PC, then use the git config commands to configure your username and email. This will ensure that you have the ability to modify repositories on Github.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;#set your user name on github
git config --global user.name &amp;quot;John Doe&amp;quot;

#set your user email on github
git config --global user.email johndoe@example.com&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
The top four commands you‚Äôll need to use git are &lt;em&gt;status&lt;/em&gt;, &lt;em&gt;add&lt;/em&gt;, &lt;em&gt;commit&lt;/em&gt;, and &lt;em&gt;push&lt;/em&gt;. Here‚Äôs an example of how to use these - we‚Äôll come back to this in a bit.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;#check the status of your local repo
git status 

#add all new untracked files to the queue
git add .

#commit your changes and add a short description
git commit -a -m &amp;quot;short description here&amp;quot;

#push your changes to the repo on the Github server
git push &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;blogdown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Blogdown&lt;/h2&gt;
&lt;p&gt;To create the site, I used a package in R called &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34; target=&#34;_blank&#34;&gt;blogdown&lt;/a&gt;. This is a great package that makes it really easy to create and update your site using R markdown. If you‚Äôre using RStudio with blogdown, you can serve the site locally and preview it right in your RStudio viewer window. It‚Äôs super easy to customize your CSS (cascading style sheet) - this is an easy way to change the styling of HTML elements across your site, such as font styles or colors. Blogdown integrates Hugo, a static site generator that has tons of awesome themes ready to go! For this site, I chose the Hugo Academic theme. I‚Äôll walk you through the basics of blogdown, then show you how to create a new blog post!&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Install &lt;a href=&#34;https://www.datacamp.com/community/tutorials/installing-R-windows-mac-ubuntu&#34; target=&#34;_blank&#34;&gt;R and Rstudio&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Install the blogdown package. You can do this in RStudio by entering the following in the console window in RStudio:
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;blogdown&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/blogdown_install.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
To use Hugo in blogdown, install Hugo:
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blogdown::install_hugo()&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
To generate the Hugo academic theme template site, run the following line in your RStudio console.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blogdown::new_site(theme = &amp;#39;gcushen/hugo-academic&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
To preview your site in the Viewer window, you can either select ‚ÄúServe site‚Äù from the Addins dropdown menu in RStudio, or run the following in your console:
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blogdown::serve_site()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/serve_site.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Set your config.toml file parameters relativeURLs to false and baseurl to your username.github.io or custom domain name.
&lt;p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/config.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;7&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
When you are ready to build your site to HTML format for web hosting, run the following in your console:
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blogdown::hugo_build()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check out your Files window in RStudio. You should see a list of files and directories similar to this:&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/files.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The content folder contains the markdown files used to build the site. The public folder contains the files generated by the hugo_build function.&lt;/p&gt;
&lt;ol start=&#34;8&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
I version control my code used to generate my site - in case I break something, I can easily revert back to a working version. To do this, create a git repo for your code by running the following in your terminal:
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;#change directories to the blodgown directory you created. For example, if you have a directory called &amp;quot;blogdown_site&amp;quot; on your desktop:
cd ~/Desktop/blogdown_site

#initialize a git repository in the directory 
git init

#add all the files to the queue
git add .

#commit the changes and add a short message
git commit -a -m &amp;quot;init commit&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Now you have a local repository. In order to host that repo on Github, go to github.com and create a new repository by clicking the green ‚Äúnew‚Äù button in the top right. Don‚Äôt initialize a README file. Give your repo a name, for example ‚Äúmy_website‚Äù. Then click ‚ÄúCreate repository‚Äù at the bottom.
&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/git-1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/git-version-control.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
In your terminal, run the following:
&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;#push your repo to the Github server - note that &amp;#39;username&amp;#39; should be replaced with your Github username and &amp;#39;my_website&amp;#39; should be replaced with the name of the repo you created on Github.
git remote add origin https://github.com/username/my_website

git push -u origin master&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;9&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
You can see my blogdown code repo &lt;a href=&#34;https://github.com/CaitlinCasar/caitlin&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. Now you‚Äôre ready to host your site online! I host my site for free on &lt;a href=&#34;https://pages.github.com/&#34; target=&#34;_blank&#34;&gt;Github Pages&lt;/a&gt;. This generates a domain in the format ‚Äòyour_github_user_name.github.io‚Äô. It‚Äôs affordable and easy to mask this domain with a custom domain of your choice. I bought my domain on Google domains for an annual fee of $12. This is totally optional - if this interests you, refer to my guide at the end of this post under ‚ÄòUsing a custom domain‚Äô!
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
First you‚Äôll need to create a new repo named &lt;em&gt;username.github.io&lt;/em&gt;. Don‚Äôt initialize it with a README file. To create my site, I created a repo using my Github user name ‚Äòcaitlincasar‚Äô on Github called caitlincasar.github.io. You can see this repo &lt;a href=&#34;https://github.com/https://github.com/CaitlinCasar/CaitlinCasar.github.io&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;img class=&#34;post&#34; src=&#34;images/git-2.png&#34;&gt;
&lt;li&gt;
&lt;p&gt;
Next, initialize a repo in your public folder in your blogdown directory and push the repo to your github.io repo:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;#change directories into your public folder - this is where the site builds to when you run blogdown::hugo_build()
cd ~/Desktop/blogdown_site/public

#initialize a git repository in the directory 
git init

#add all the files to the queue
git add .

#commit the changes and add a short message
git commit -a -m &amp;quot;init commit&amp;quot;

#push your repo to the github server
git remote add origin https://github.com/username/username.github.io

git push -u origin master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
To view your site, go to &lt;a href=&#34;https://username.github.io/&#34; class=&#34;uri&#34;&gt;https://username.github.io/&lt;/a&gt; in your web browser.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;create-a-new-post&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Create a new post&lt;/h2&gt;
&lt;p&gt;
We‚Äôre finally ready to create a new post! Run the following in your RStudio console:
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#run the blogdown new_post function to generate a new markdown file in the post directory with today&amp;#39;s date
blogdown::new_post(title = &amp;quot;my blog post title&amp;quot;, subdir=&amp;quot;post/my_blog_post_directory&amp;quot;, date = &amp;quot;June 9 2020&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The Hugo academic theme will add an image next to your post on the home page. To do this, add the image you want to be associated with your post inside the new directory you just created - in this example the directory is called ‚Äúmy_blog_post_directory‚Äù. Name the image ‚Äúfeatured‚Äù, as in ‚Äúfeatured.jpg‚Äù. Then, rename your new markdown file ‚Äúindex‚Äù, as in ‚Äúindex.Rmd‚Äù.
&lt;/p&gt;
&lt;p&gt;
Open up the markdown file you just created. You can do this from RStudio by navigating to the file in the Files window pane via the following path: content &amp;gt;&amp;gt; post &amp;gt;&amp;gt;my_blog_post_directory. Then double click on the markdown file.
&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/blog_post_file.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
To preview your new post, click on the Viewer tab. You should see something like this:
&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/new_post.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
You should edit the header to include your post name, date of the post, summary, etc. Here‚Äôs an exaple of how to modify the header:
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;---
title: my blog post title
author: ~
date: June 9 2020
slug: June 9 2020-my blog post title
categories: [&amp;quot;Diversity&amp;quot;] #add categories for your post inside the brackets
tags: [&amp;quot;#BLM&amp;quot;, &amp;quot;equity&amp;quot;] #add tags inside the brackets
subtitle: &amp;#39;This is my post!&amp;#39;
summary: &amp;#39;Some info here about this post...This is what will be displayed on the home page.&amp;#39;
authors: [Caitlin] #add your name inside these brackets to indicate who authored the post
lastmod: &amp;#39;2020-06-09T15:36:45-05:00&amp;#39;
featured: no
image:
  caption: &amp;#39;&amp;#39;
  focal_point: &amp;#39;&amp;#39;
  preview_only: no
projects: []
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Now you‚Äôre ready to add content to your post. Add Rmarkdown formatted text below the header in your markdown file, including images, hyperlinks, plots, code chunks, videos, and more! Here‚Äôs an example of some basic content:
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;---
title: my blog post title
author: ~
date: June 9 2020
slug: June 9 2020-my blog post title
categories: [&amp;quot;Diversity&amp;quot;] #add categories for your post inside the brackets
tags: [&amp;quot;#BLM&amp;quot;, &amp;quot;equity&amp;quot;] #add tags inside the brackets
subtitle: &amp;#39;This is my post!&amp;#39;
summary: &amp;#39;Some info here about this post...This is what will be displayed on the home page.&amp;#39;
authors: [Caitlin] #add your name inside these brackets to indicate who authored the post
lastmod: &amp;#39;2020-06-09T15:36:45-05:00&amp;#39;
featured: no
image:
  caption: &amp;#39;&amp;#39;
  focal_point: &amp;#39;&amp;#39;
  preview_only: no
projects: []
---
  
Hello! This is my *first* blog post! I am **very** excited to share my post with you. I learned how to make this post [here](https://caitlincasar.com/post/blogdown/). 

## Subheader

This is a new section under a subheader. I can make an ordered list:
1. This is item 1
2. This is item 2
3. And this is item 3!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://rmarkdown.rstudio.com/authoring_basics.html&#34; target=&#34;_blank&#34;&gt;This&lt;/a&gt; is great resource for more of the Rmarkdown basics.
&lt;/p&gt;
&lt;p&gt;
Once you‚Äôre done creating your post, just push your changes to Github and you‚Äôre done!
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#change directories into your public folder - this is where the site builds to when you run blogdown::hugo_build()
cd ~/Desktop/blogdown_site/public

#add the new file
git add .

#commit the changes 
git commit -a -m &amp;quot;adding Caitlin&amp;#39;s new blog post&amp;quot;

#push the changes to the Github server
git push&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Now you can see your awesome new post online! Hooray! üê∏
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-a-custom-domain&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using a custom domain&lt;/h2&gt;
&lt;p&gt;Don‚Äôt like the github.io subdomain and TLD (top-level domain)? You can buy your own on &lt;a href=&#34;https://domains.google/&#34; target=&#34;_blank&#34;&gt;Google domains&lt;/a&gt;! I pay a $12 annual fee for caitlincasar.com. We‚Äôll walk through the steps here:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Go to &lt;a href=&#34;https://domains.google/&#34; target=&#34;_blank&#34;&gt;Google domains&lt;/a&gt; and search for a domain name to see if it‚Äôs available.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/google-domain-search.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Select the domain you want, then add it to your shopping cart.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/google-domain-buy.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Go to your shopping cart and click on the blue ‚Äòcheck out‚Äô button to review your purchase. Make sure your contact info is correct and enter your credit card, then click the blue ‚Äòbuy‚Äô button.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/google-domain-checkout.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Next, go to your google domains account and select ‚Äòmy domains‚Äô on the left side panel. Then select the ‚Äòmanage‚Äô link next to your domain.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/google-domains-mydomains.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Click on ‚ÄòDNS‚Äô on the left side panel. Then select ‚ÄòUse the Google Domains name servers‚Äô. Then click the blue ‚Äòsave‚Äô button.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/google-domains-nameservers.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Scroll to the bottom of the page and create an alias for your domain, then click the blue ‚ÄòAdd‚Äô button. You can use one of four IP addresses for Github:
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;185.199.108.153
185.199.109.153
185.199.110.153
185.199.111.153&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/google-domains-alias.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
&lt;i&gt;
&lt;strong&gt;
Note:
&lt;/strong&gt;
Github Pages recommends creating a CNAME record which I didn‚Äôt do. For more info on this, see their documentation &lt;a href=&#34;https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-a-subdomain&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.
&lt;/i&gt;
&lt;/p&gt;
&lt;p&gt;
You should create a record for both your root domain (caitlincasar.com) and your www subdomain (www.caitlincasar.com).
&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/google-domains-dnsrecords.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;7&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Finally, we‚Äôll need to update the domain name on Github. Navigate to your username.github.io repo, then select ‚ÄòSettings‚Äô.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/github-settings.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;8&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Scroll down to the Github Pages section and enter your custom domain name. It make take a few hours for your new domain name to register, after which you‚Äôll be able to check the box under ‚ÄòEnforce HTTPS‚Äô. This enables https encryption on your site to prevent &lt;a href=&#34;https://www.csoonline.com/article/3340117/what-is-a-man-in-the-middle-attack-how-mitm-attacks-work-and-how-to-prevent-them.html&#34; target=&#34;_blank&#34;&gt;man-in-the-middle attacks&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/github-customdomain.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
&lt;i&gt;
&lt;strong&gt;
Note:
&lt;/strong&gt;
I ran into an issue where only my root domain caitlincasar.com had HTTPS enabled, and my www subdomain was not secure. To fix this, I deleted caitlincasar.com from my custom domain on my Github repo. Then I entered www.caitlincasar.com as my custom domain, then re-enabled HTTPS. This enabled HTTPS on both the root and www subdomain. This seems to be some sort of bug that I found referenced &lt;a href=&#34;https://github.community/t/does-github-pages-support-https-for-www-and-subdomains/10360/14&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;, and there are multiple solutions for dealing with it.
&lt;/i&gt;
&lt;/p&gt;
&lt;ol start=&#34;9&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Pull your domain name changes from your Github repo to your local repo, commit any changes you made such as a new blog post, then push it to Github.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#change directories into your public folder - this is where the site builds to when you run blogdown::hugo_build()
cd ~/Desktop/blogdown_site/public

#pull in your remote domain name changes from Github 
git pull 

#add any new files
git add .

#commit the changes 
git commit -a -m &amp;quot;adding Caitlin&amp;#39;s new blog post&amp;quot;

#push the changes to the Github server
git push&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
You should now be able to see your site when you navigate to your custom domain in your web browser. Congrats on creating and hosting your own site! Feel free to comment below with any comments/questions üòé
&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Making figures for microbial ecology: Interactive NMDS plots</title>
      <link>/post/making_figs_2/</link>
      <pubDate>Mon, 01 Jun 2020 21:14:16 -0500</pubDate>
      <guid>/post/making_figs_2/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This is the one of several tutorials I‚Äôm putting together for making figures that are common in microbial ecology. Today we‚Äôll create an interactive NMDS plot for exploring your microbial community data. NMDS, or Nonmetric Multidimensional Scaling, is a method for dimensionality reduction. This works great for high demensional datasets like microbial communities and makes it visually easy to compare lots of communities to each other. We‚Äôre using NMDS rather than PCA (principle coordinates analysis) because this method can accomodate the Bray-Curtis dissimilarity distance metric, which is better suited for our community data than Euclidean distance. For this tutorial I‚Äôm using data and code from my &lt;a href=&#34;https://caitlincasar.com/publication/casar2020/&#34;&gt;publication&lt;/a&gt; in &lt;em&gt;Geobiology&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;First we‚Äôll need to set up our environment in R:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#load libraries 
pacman::p_load(tidyverse, plotly, vegan)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, read the OTU data into a dataframe. We can pull the data directy from Github by reading the raw file. You can preview the data in the table below this code chunk.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#read the data into a dataframe
otu_table &amp;lt;- read_delim(&amp;quot;https://raw.githubusercontent.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms/master/orig_data/DeMMO136_Dec2015toApril2018_noChimera_otuTable_withTaxa_d10000.txt&amp;quot;, delim=&amp;quot;\t&amp;quot;, comment = &amp;quot;# &amp;quot;)

metadata &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms/master/orig_data/metadata.csv&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/making_figs_2/index_files/figure-html//widgets/widget_unnamed-chunk-3.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;First we need to normalize our data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;otu_norm &amp;lt;- otu_table %&amp;gt;%
  select(-taxonomy) %&amp;gt;%
  mutate_at(vars(-`#OTU ID`), funs(./sum(.)*100)) %&amp;gt;% #normalize to relative abundance 
  gather(sample_id, abundance, `7.DeMMO1.Steri.050917`:`18.800.DitchFluid.041818`) %&amp;gt;%
  spread(key = `#OTU ID`,value = &amp;#39;abundance&amp;#39;) %&amp;gt;%
  right_join(metadata %&amp;gt;% select(sample_id)) %&amp;gt;%
  column_to_rownames(&amp;quot;sample_id&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let‚Äôs use the metaMDS function in vegan to perform NMDS. We‚Äôll use the default distance metric, Bray-Curtis dissimilarity, and set the argument k to 2 dimensions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NMDS_ord &amp;lt;- otu_norm %&amp;gt;%
  metaMDS(k=2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let‚Äôs pull out the NMDS coordinates for axes MDS1 and MDS2 for plotting purposes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#pull out ordination and vector coordinates for plotting
NMDS_coords &amp;lt;- NMDS_ord[[&amp;quot;points&amp;quot;]] %&amp;gt;%
  as_tibble(rownames = &amp;quot;sample_id&amp;quot;) %&amp;gt;%
  left_join(metadata)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can create a dictionary of shapes for our plot like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#make shape dictionary for ploting 
shape_dict &amp;lt;- c(0, 15, 15, 1, 19, 19, 2, 17, 17, 5, 5)
names(shape_dict) &amp;lt;- c(&amp;quot;D1.fluid&amp;quot;, &amp;quot;D1.inert.control&amp;quot;, &amp;quot;D1.mineral&amp;quot;, &amp;quot;D3.fluid&amp;quot;, &amp;quot;D3.inert.control&amp;quot;, &amp;quot;D3.mineral&amp;quot;, &amp;quot;D6.fluid&amp;quot;, &amp;quot;D6.inert.control&amp;quot;, &amp;quot;D6.mineral&amp;quot;,&amp;quot;D3.cont.control&amp;quot;, &amp;quot;ambient.control&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let‚Äôs plot the data!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#NMDS plot with controls 
NMDS_plot &amp;lt;- NMDS_coords %&amp;gt;%
  ggplot(aes(MDS1, MDS2)) +
  geom_point(size=2, alpha=0.8, aes(shape=site.type, color=site.type, label = sample_id)) +
  scale_shape_manual(values=shape_dict) +
  theme(legend.key.size = unit(.5, &amp;quot;cm&amp;quot;))


#visualize interactive plot
ggplotly(NMDS_plot)&lt;/code&gt;&lt;/pre&gt;
&lt;iframe src=&#34;plot.html&#34; width=&#34;100%&#34; height=&#34;500&#34; style=&#34;border: none;&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Now we have a nice interactive plot for exploring the ordination. Easy-peasy! üòé&lt;/p&gt;
&lt;a class=&#34;github-button&#34; href=&#34;https://github.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms&#34; data-icon=&#34;octicon-repo-forked&#34; aria-label=&#34;Fork ntkme/github-buttons on GitHub&#34;&gt;Fork Me&lt;/a&gt;
&lt;script async defer src=&#34;https://buttons.github.io/buttons.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Making figures for microbial ecology: Interactive bar plots</title>
      <link>/post/making_figs/</link>
      <pubDate>Sun, 31 May 2020 21:14:16 -0500</pubDate>
      <guid>/post/making_figs/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;a class=&#34;github-button&#34; href=&#34;https://github.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms&#34; data-icon=&#34;octicon-repo-forked&#34; aria-label=&#34;Fork ntkme/github-buttons on GitHub&#34;&gt;Fork&lt;/a&gt;
&lt;script async defer src=&#34;https://buttons.github.io/buttons.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;This is the first of several tutorials I‚Äôm putting together for making figures that are common in microbial ecology. Today we‚Äôll start with an interactive bar plot for exploring your microbial community data. For this tutorial I‚Äôm using data and code from my &lt;a href=&#34;https://caitlincasar.com/publication/casar2020/&#34;&gt;publication&lt;/a&gt; in &lt;em&gt;Geobiology&lt;/em&gt;. You can fork the repo by clicking the button above!&lt;/p&gt;
&lt;p&gt;To generate the data, we sequenced DNA from microbial communities at our study site DeMMO. The raw sequence data was processed with QIIME to produce an OTU table. OTUs, or operational taxonomic units, are bins that differentiate sequences at a 97% similarity threshold. For our purposes, you can think of an OTU as a species of bacteria or archaea. As a microbial ecologist, you might want to compare the taxonomic compositions of your communities. Let‚Äôs make a cool html bar plot to explore our microbial community data!&lt;/p&gt;
&lt;p&gt;Before we get started, you‚Äôll need to set up your environment in R. This code depends on the packages being loaded here:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#load libraries 
pacman::p_load(tidyverse, plotly, randomcoloR)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, read the OTU data into a dataframe. We can pull the data directy from Github by reading the raw file. You can preview the data in the table below this code chunk.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#read the data into a dataframe
otu_table &amp;lt;- read_delim(&amp;quot;https://raw.githubusercontent.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms/master/orig_data/DeMMO136_Dec2015toApril2018_noChimera_otuTable_withTaxa_d10000.txt&amp;quot;, delim=&amp;quot;\t&amp;quot;, comment = &amp;quot;# &amp;quot;)
metadata &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms/master/orig_data/metadata.csv&amp;quot;) 

#store the taxonomy for each OTU
taxonomy &amp;lt;- otu_table %&amp;gt;%
  select(`#OTU ID`, taxonomy) %&amp;gt;%
  mutate(tax = gsub(&amp;quot;Gammaproteobacteria; D_3__Betaproteobacteriales&amp;quot;, &amp;quot;Betaproteobacteria; D_3__Betaproteobacteriales&amp;quot;, taxonomy), #fix taxonomy for Beta&amp;#39;s,
         taxonomy = str_remove_all(tax, &amp;quot;D_0__| D_1__| D_2__| D_3__| D_4__| D_5__| D_6__&amp;quot;)) %&amp;gt;%
  separate(taxonomy ,sep=&amp;#39;;&amp;#39;,c(&amp;quot;domain&amp;quot;, &amp;quot;phylum&amp;quot;, &amp;quot;class&amp;quot;, &amp;quot;order&amp;quot;, &amp;quot;family&amp;quot;, &amp;quot;genus&amp;quot;, &amp;quot;species&amp;quot;)) %&amp;gt;%
  gather(level, taxonomy, domain:species)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/making_figs/index_files/figure-html//widgets/widget_unnamed-chunk-3.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;We want to look at the community compositions, so first let‚Äôs normalize and reshape the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;abundance_table &amp;lt;- otu_table %&amp;gt;%
  select(-taxonomy) %&amp;gt;%
  mutate_at(vars(-`#OTU ID`), funs(./sum(.)*100)) %&amp;gt;% #normalize to relative abundance 
  gather(sample_id, abundance, `7.DeMMO1.Steri.050917`:`18.800.DitchFluid.041818`) &lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/making_figs/index_files/figure-html//widgets/widget_unnamed-chunk-5.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;For plotting purposes, let‚Äôs pick a subset of samples.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot_samples &amp;lt;- c(&amp;quot;12.DeMMO1.steri.041818&amp;quot;, 
                     &amp;quot;26.DeMMO1.SC1.top.041818&amp;quot;, 
                     &amp;quot;22.DeMMO1.C.top.041818&amp;quot;,
                     &amp;quot;23.DeMMO1.D.top.041818&amp;quot;, 
                     &amp;quot;24.DeMMO1.E.top.041818&amp;quot;,
                     &amp;quot;27.DeMMO1.SC2.top.041818&amp;quot;, 
                     &amp;quot;34.DeMMO1.SC10.top.041818&amp;quot;, 
                     &amp;quot;45.DeMMO1.7.top.041818&amp;quot;,
                     &amp;quot;46.DeMMO1.8.top.041818&amp;quot;, 
                     &amp;quot;47.DeMMO1.9.top.041818&amp;quot;,
                     &amp;quot;14.DeMMO3.steri.041718&amp;quot;, 
                     &amp;quot;51.DeMMO3.A.top.041718&amp;quot;,
                     &amp;quot;27.DeMMO3.T8.top.051117&amp;quot;, 
                     &amp;quot;53.DeMMO3.C.top.041718&amp;quot;, 
                     &amp;quot;54.DeMMO3.D.top.041718&amp;quot;,
                     &amp;quot;55.DeMMO3.E.top.041718&amp;quot;, 
                     &amp;quot;39.DeMMO3.1.top.041718&amp;quot;, 
                     &amp;quot;40.DeMMO3.2.top.041718&amp;quot;,
                     &amp;quot;41.DeMMO3.3.top.041718&amp;quot;, 
                     &amp;quot;56.DeMMO3.F.top.041718&amp;quot;,
                     &amp;quot;12.DeMMO6.Steri#2.051017&amp;quot;, 
                     &amp;quot;13.DeMMO6.T1.top.051017&amp;quot;,
                     &amp;quot;15.DeMMO6.T2.top.051017&amp;quot;, 
                     &amp;quot;17.DeMMO6.T3.top.051017&amp;quot;,
                     &amp;quot;19.DeMMO6.T4.top.051017&amp;quot;,
                     &amp;quot;21.DeMMO6.T5.top.051017&amp;quot;, 
                     &amp;quot;24.DeMMO6.T6.bottom.051017&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let‚Äôs take a look at the phylum level abundances for each sample.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;taxon_abundance_table &amp;lt;- abundance_table %&amp;gt;%
  left_join(taxonomy) %&amp;gt;%
  filter(sample_id %in% barplot_samples &amp;amp; level == &amp;quot;phylum&amp;quot;) %&amp;gt;%
  mutate(taxonomy = if_else(is.na(taxonomy), &amp;quot;Unassigned&amp;quot;, taxonomy))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs make a custom color palette for our phyla.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;phylum_color &amp;lt;- distinctColorPalette(k = length(unique(taxon_abundance_table$taxonomy)))
names(phylum_color) &amp;lt;- unique(taxon_abundance_table$taxonomy)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now, let‚Äôs create a stacked bar plot for each site.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bar_plot &amp;lt;- taxon_abundance_table %&amp;gt;%
  left_join(metadata) %&amp;gt;%
  group_by(site, experiment.type, taxonomy) %&amp;gt;%
  summarise(abundance = sum(abundance)) %&amp;gt;%
  ungroup() %&amp;gt;%
  mutate(experiment.type = factor(experiment.type, levels = c(&amp;quot;fluid&amp;quot;, &amp;quot;inert.control&amp;quot;, &amp;quot;pyrolusite&amp;quot;, &amp;quot;pyrite&amp;quot;,&amp;quot;hematite&amp;quot;,&amp;quot;magnetite&amp;quot;,&amp;quot;siderite&amp;quot;,&amp;quot;gypsum&amp;quot;,&amp;quot;muscovite&amp;quot;,&amp;quot;calcite&amp;quot;))) %&amp;gt;%
  ggplot(aes(fill=taxonomy, y=abundance, x=experiment.type)) +
  geom_bar(stat=&amp;#39;identity&amp;#39;, position=&amp;#39;fill&amp;#39;) +
  scale_fill_manual(values=phylum_color) +
  coord_flip() + 
  theme(axis.title = element_blank(),
        legend.title = ggplot2::element_blank(), 
        legend.text = ggplot2::element_text(size = 8),
        legend.key.size = unit(0.5, &amp;quot;cm&amp;quot;)) +
  facet_grid(cols = vars(site), switch = &amp;quot;y&amp;quot;) + 
  guides(fill = guide_legend(ncol = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, let‚Äôs make it easier to explore our data with an html version of our bar plot!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplotly(bar_plot)&lt;/code&gt;&lt;/pre&gt;
&lt;iframe src=&#34;plot.html&#34; width=&#34;100%&#34; height=&#34;500&#34; style=&#34;border: none;&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Ta da! You now have an interactive html version of your plot that you can view in your web browser - just double click the file in your file explorer and it will automatically open. These files are portable, so you can email them to your collaborators and explore the data together. Stay tuned for upcoming tutorials on making figures for microbial ecology!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
